{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","terminalRef","React","createRef","term","terminal","Terminal","open","current","_initialized","prompt","write","writeln","on","key","ev","printable","altKey","altGraphKey","ctrlKey","metaKey","keyCode","_core","buffer","x","data","react_default","a","createElement","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAIqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcC,IAAMC,YAFRT,mFASjB,IAAyBU,EAHzBP,KAAKQ,SAAW,IAAIC,WACpBT,KAAKQ,SAASE,KAAKV,KAAKI,YAAYO,UAEXJ,EAqCTP,KAAKQ,UApCVI,eAITL,EAAKK,cAAe,EAEpBL,EAAKM,OAAS,WACZN,EAAKO,MAAM,WAGbP,EAAKQ,QAAQ,4BACbR,EAAKQ,QAAQ,+CACbR,EAAKQ,QAAQ,IACbR,EAAKM,SAELN,EAAKS,GAAG,MAAO,SAAUC,EAAKC,GAC5B,IAAMC,GACHD,EAAGE,SAAWF,EAAGG,cAAgBH,EAAGI,UAAYJ,EAAGK,QAEnC,KAAfL,EAAGM,QACLjB,EAAKM,SACmB,IAAfK,EAAGM,QAERjB,EAAKkB,MAAMC,OAAOC,EAAI,GACxBpB,EAAKO,MAAM,SAEJK,GACTZ,EAAKO,MAAMG,KAIfV,EAAKS,GAAG,QAAS,SAAUY,GACzBrB,EAAKO,MAAMc,uCAQf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKhC,KAAKI,qBAnDO6B,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f330311.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Terminal } from 'xterm'\nimport 'xterm/dist/xterm.css'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.terminalRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.terminal = new Terminal()\n    this.terminal.open(this.terminalRef.current)\n\n    function runFakeTerminal(term) {\n      if (term._initialized) {\n        return\n      }\n\n      term._initialized = true\n\n      term.prompt = () => {\n        term.write('\\r\\n$ ')\n      }\n\n      term.writeln('Welcome to Splunk server')\n      term.writeln('Type some keys and commands to play around.')\n      term.writeln('')\n      term.prompt()\n\n      term.on('key', function (key, ev) {\n        const printable =\n          !ev.altKey && !ev.altGraphKey && !ev.ctrlKey && !ev.metaKey\n\n        if (ev.keyCode === 13) {\n          term.prompt()\n        } else if (ev.keyCode === 8) {\n          // Do not delete the prompt\n          if (term._core.buffer.x > 2) {\n            term.write('\\b \\b')\n          }\n        } else if (printable) {\n          term.write(key)\n        }\n      })\n\n      term.on('paste', function (data) {\n        term.write(data)\n      })\n    }\n\n    runFakeTerminal(this.terminal)\n  }\n\n  render() {\n    return <div ref={this.terminalRef} />\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}